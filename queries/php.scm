;; @statement generated by the following command:
;;  curl https://raw.githubusercontent.com/tree-sitter/tree-sitter-php/master/src/node-types.json | jq '[.[] | select(.type == "_statement" or .type == "_simple_statement") | .subtypes[].type]' | grep -v '\"_' | sed -n '1d;p' | sed '$d' | sort
;; and then cleaned up.
[
  (break_statement)
  (class_declaration)
  (compound_statement)
  (const_declaration)
  (continue_statement)
  (declare_statement)
  (do_statement)
  (echo_statement)
  (empty_statement)
  (enum_declaration)
  (expression_statement)
  (for_statement)
  (foreach_statement)
  (function_definition)
  (function_static_declaration)
  (global_declaration)
  (goto_statement)
  (if_statement)
  (interface_declaration)
  (named_label_statement)
  (namespace_definition)
  (namespace_use_declaration)
  (return_statement)
  (switch_statement)
  (trait_declaration)
  (try_statement)
  (unset_statement)
  (while_statement)
] @statement

[
  (string)
  (shell_command_expression)
] @string @textFragment

(comment) @comment @textFragment

[
  (assignment_expression
    left: (_) @name
  )
  (class_declaration
    name: (_) @name
  )
  (function_definition
    name: (_) @name
  )
  (method_declaration
    name: (_) @name
  )
] @_.domain

;; Conditionals
;;!! if (x < y) {
;;!  ----^^^^^---
(_
  condition: (_
    (_) @condition
  )
) @_.domain

(if_statement
  "if" @branch.start
  body: (_) @branch.end
) @ifStatement @branch.iteration
[
  (else_clause)
  (else_if_clause)
] @branch

[
  (array_creation_expression)
] @list

(array_element_initializer
  (_) @collectionKey @_.trailing.end.endOf
  .
  "=>"
  .
  (_) @_.trailing.end.startOf
) @_.domain

[
  (array_element_initializer
    (_) @_.leading.start.endOf
    .
    "=>"
    .
    (_) @value @_.leading.end.startOf
  )
  (assignment_expression
    left: (_) @_.leading.start.endOf
    right: (_) @value @_.leading.end.startOf
  )
  (augmented_assignment_expression
    left: (_) @_.leading.start.endOf
    right: (_) @value @_.leading.end.startOf
  )
  (return_statement
    (_) @value
  )
  (yield_expression
    (_) @value
  )
] @value.domain

(class_declaration
  name: (_) @className
) @class @className.domain

[
  (function_definition) @namedFunction
  (method_declaration) @namedFunction
  (expression_statement
    (assignment_expression
      right: (anonymous_function_creation_expression)
    ) @namedFunction
    ";" @_.trailing
  )
  (expression_statement
    (assignment_expression
      right: (arrow_function)
    ) @namedFunction
    ";" @_.trailing
  )
] @namedFunction.domain

[
  (anonymous_function_creation_expression)
  (arrow_function)
] @anonymousFunction

[
  (function_definition
    name: (_) @functionName
  )
  (method_declaration
    name: (_) @functionName
  )
  ;;!! $myFunk = function () {
  ;;!  ^^^^^^^----------------
  (assignment_expression
    left: (_) @functionName
    right: (anonymous_function_creation_expression)
  )
  ;;!! $myFunk = fn () => echo 'hello world!';
  ;;!  ^^^^^^^--------------------------------
  (assignment_expression
    left: (_) @functionName
    right: (arrow_function)
  )
] @functionName.domain

[
  ;;!! $test = test();
  ;;!          ^^^^^^
  (function_call_expression)
  ;;!! $class = new MyClass();
  ;;!           ^^^^^^^^^^^^^
  (object_creation_expression)
] @functionCall

;;!! function myFunk($first, $second) {
;;!                 -^^^^^^--^^^^^^^-
(_
  parameters: (_
    (_)? @_.leading.start.endOf
    .
    (_) @argumentOrParameter @_.leading.end.startOf @_.trailing.start.endOf
    .
    (_)? @_.trailing.end.startOf
  ) @_.iteration
  (#insertion-delimiter! @argumentOrParameter ", ")
)

;;!! $result = myFunk($first, $second);
;;!                  -^^^^^^--^^^^^^^-
(_
  arguments: (_
    (_)? @_.leading.start.endOf
    .
    (_) @argumentOrParameter @_.leading.end.startOf @_.trailing.start.endOf
    .
    (_)? @_.trailing.end.startOf
  ) @_.iteration
  (#insertion-delimiter! @argumentOrParameter ", ")
)
